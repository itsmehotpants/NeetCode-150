class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> mp;
        for (int num : nums) {
            mp[num]++;
        }
        
        vector<pair<int, int>> freqVec(mp.begin(), mp.end());
                sort(freqVec.begin(), freqVec.end(), [](pair<int, int>& a, pair<int, int>& b) {
            return a.second > b.second;
        });
        
        vector<int> res;
        for (int i = 0; i < k; i++) {
            res.push_back(freqVec[i].first);
        }
        
        return res;
    }
};

// best 
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int>v;
       unordered_map<int, int> mp;
       for (int num : nums) {
        mp[num]++;
    } 
     priority_queue< pair<int,int>>max_heap;
     for (const auto& pair : mp) {
            max_heap.push({ pair.second,pair.first}); 
        }
        for(int i=0;i<k;i++){
            v.push_back(max_heap.top().second);
            max_heap.pop();
        }
        return v;    // Kindly Upvote!
    }
};
