class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& a, int k) {
        // Brute approach TC = N*K
        // int sz = a.size() - k + 1;
        // vector<int> ans;
        // for (int l = 0; l < sz; l++) {
        //     int mx = *max_element(a.begin() + l, a.begin() + l + k);
        //     ans.push_back(mx);
        // }
        // return ans;
//optimal Tc  = N
          deque<int> dq; 
        vector<int> ans;

        for (int i = 0; i < a.size(); i++) {
            if (!dq.empty() && dq.front() == i - k) dq.pop_front();

            while (!dq.empty() && a[dq.back()] < a[i]) dq.pop_back();

            dq.push_back(i);

            if (i >= k - 1) ans.push_back(a[dq.front()]);
        }
        return ans;
    }
};
